package tree;
import java.util.Scanner;

public class TreeNode {
    int value;
    TreeNode left;
    TreeNode right;

    public TreeNode(int value) {
        this.value = value;
        this.left = null;
        this.right = null;
    }
}

class TreeProduct {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int H = scanner.nextInt();

        while (H != 0) {
            int numNodes = (1 << H) - 1;
            int[] values = new int[numNodes];
            for (int i = 0; i < numNodes; i++) {
                values[i] = scanner.nextInt();
            }

            TreeNode root = constructTree(values, 0);

            long result = calculateP1(root);
            System.out.println(result);

            H = scanner.nextInt();
        }
    }

    
    private static TreeNode constructTree(int[] values, int index) {
        if (index >= values.length) {
            return null;
        }
        TreeNode node = new TreeNode(values[index]);
        node.left = constructTree(values, 2 * index + 1);
        node.right = constructTree(values, 2 * index + 2);
        return node;
    }

  
    private static long calculateP1(TreeNode node) {
        if (node == null) {
            return 0;
        }
        long leftProduct = calculateP1(node.left);
        long rightProduct = calculateP1(node.right);
        return Math.max(node.value * leftProduct, node.value * rightProduct) % 1_000_000_007;
    }
}
